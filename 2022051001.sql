2022-0510-01) USER FUNCTION
2.User Function 사용자 정의 함수
 1)제일 먼저 기존 데이터 확인!!!
SELECT PROD_ID, PROD_NAME, PROD_TOTALSTOCK
FROM PROD
WHERE PROD_ID = 'P101000002';


--PARAMETER(인수)로 사용
IN 입력용
OUT

/
2)프로시저 생성 --인바인드변수를 이용
CREATE OR REPLACE PROCEDURE USP_PROD_TOTALSTOCK_UPDATE
 (P_PROD_ID IN VARCHAR2, P_PROD_TOTALSTOCK IN NUMBER) --바인드변수 208LINE 'P101000002'를 받음/ 들어오는게 인바인드 나가는게 아웃바인드. 얘는 PARAMETER가 들어오고 있으니 인바인드
IS
    --변수선언
BEGIN
    UPDATE PROD
    SET PROD_TOTALSTOCK = PROD_TOTALSTOCK + P_PROD_TOTALSTOCK --기존재고+20 / 인수를 인바인드변수에 넣어줌 P_PROD_ID, P_PROD_TOTALSTOCK
    WHERE PROD_ID = P_PROD_ID; --'P101000002' / 인수를 인바인드변수에 넣어줌 P_PROD_ID, P_PROD_TOTALSTOCK
    DBMS_OUTPUT.put_line('업데이트 성공!');
   -- COMMIT;
END;
 /
3) 익스큐트
--EXECUTE USP_PROD_TOTALSTOCK_UPDATE;  
EXEC USP_PROD_TOTALSTOCK_UPDATE('P101000002',20); --인수를 인바인드변수에 넣어줌 P_PROD_ID, P_PROD_TOTALSTOCK
/
4) 데이터 반영됐는지 확인
/
SELECT PROD_ID, PROD_NAME, PROD_TOTALSTOCK
FROM PROD
WHERE PROD_ID = 'P101000002';
/

사용예) 회원아이디를 입력받아 이름과 취미를 OUT 매개변수로

(ANONYMOUS BLOCK사용)
***PL/SQL은 INTO를 꼭 씀!***
**변수선언은 DECLARE에서**
/
DECLARE
    --SCALAR변수
    V_NAME VARCHAR2(20);
    --REFERENCE변수
    V_LIKE MEMBER.MEM_LIKE%TYPE; --=VARCHAR2(40)
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
    FROM   MEMBER
    WHERE  MEM_ID = 'a001';
    
    DBMS_OUTPUT.put_line(V_NAME || ', ' || V_LIKE);
END;
/

(PROCEDURE 사용)
/--설계도대로 비행기만들기
CREATE OR REPLACE PROCEDURE USP_GET_MEMBER --USP_GET_MEMBER프로시저이름
(P_MEM_ID IN VARCHAR2)
--인바인드(받아서조건에할당)
IS
    --SCALAR변수
    V_NAME VARCHAR2(20);
    --REFERENCE변수
    V_LIKE MEMBER.MEM_LIKE%TYPE; --=VARCHAR2(40)
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
    FROM   MEMBER
    WHERE  MEM_ID = P_MEM_ID;
    
    DBMS_OUTPUT.put_line(V_NAME || ', ' || V_LIKE);
END;
/--비행기 날리기

EXEC USP_GET_MEMBER('c001'); --'c001'나감
/




/--설계도대로 비행기만들기
CREATE OR REPLACE PROCEDURE USP_GET_MEMBER --USP_GET_MEMBER프로시저이름
(P_MEM_ID IN VARCHAR2, V_NAME OUT VARCHAR2, V_LIKE OUT VARCHAR2) --스칼라/참조변수가 필요없음
--인바인드(받아서조건에할당)     아웃바인드                 아웃바인드
IS
BEGIN
    SELECT MEM_NAME, MEM_LIKE INTO V_NAME, V_LIKE
    FROM   MEMBER
    WHERE  MEM_ID = P_MEM_ID;
END;
/--비행기 날리기 --MEM_NAME,MEM_LIKE 변수선언 회원취미담는공간 /--'c001'나감,  : 들어옴
--아래 문단 전체 드래그 블록지정해서 스크립트실행
VAR MEM_NAME VARCHAR2(20) 
VAR MEM_LIKE VARCHAR2(20) 
EXEC USP_GET_MEMBER('c001', :MEM_NAME, :MEM_LIKE)
PRINT MEM_NAME
PRINT MEM_LIKE;
/

사용예)2020년 회원별 구매금액의 합을 구하는 쿼리를 만들어보자 SALE*QTY
      Alias: MEM_NAME, MEM_AMT
      이 중에서 구매금액의 합이 가장 많은 1명만 출력해보자
    (일반)
    SELECT M.MEM_NAME,
           SUM(P.PROD_SALE * C.CART_QTY) AS MEM_AMT
      FROM PROD P, MEMBER M, CART C
     WHERE P.PROD_ID = C.CART_PROD
       AND C.CART_MEMBER = M.MEM_ID
       AND CART_NO LIKE '2020%'
     GROUP BY MEM_NAME
     ORDER BY MEM_NAME;

    (ANSI)
    SELECT M.MEM_NAME,
           SUM(P.PROD_SALE * C.CART_QTY) AS MEM_AMT
      FROM CART C
     INNER JOIN PROD P ON (P.PROD_ID = C.CART_PROD)
     INNER JOIN MEMBER M ON (C.CART_MEMBER = M.MEM_ID AND CART_NO LIKE '2020%')
     GROUP BY MEM_NAME
     ORDER BY MEM_NAME;      
     
     
**서브쿼리란...? 메인쿼리 안에 사용된 또다른 SQL문
종류
SELECT ->SCALAR
FROM->IN-LINE VIEW
WHERE->NESTED

CREATE OR REPLACE PROCEDURE USP_MEM_TOP
(P_YEAR IN VARCHAR2,P_MEM_NAME OUT VARCHAR2, P_MEM_AMT OUT NUMBER)
IS
BEGIN
SELECT T.MEM_NAME, T.MEM_AMT INTO P_MEM_NAME, P_MEM_AMT
FROM 
   (
    SELECT M.MEM_NAME,
           SUM(P.PROD_SALE * C.CART_QTY) AS MEM_AMT
      FROM PROD P, MEMBER M, CART C
     WHERE P.PROD_ID = C.CART_PROD
       AND C.CART_MEMBER = M.MEM_ID
       AND CART_NO LIKE P_YEAR || '%'
     GROUP BY MEM_NAME
     ORDER BY 2 DESC
     )T
WHERE ROWNUM<=1;
END;
/
VAR P_MEM_NAME VARCHAR2
VAR P_MEM_AMT NUMBER
EXEC USP_MEM_TOP('2020', :P_MEM_NAME, :P_MEM_AMT)
PRINT P_MEM_NAME
PRINT P_MEM_AMT;
/


-- 해당 월에 대한 해당 상품의 입고, 출고를 처리해 화면에 출력해보자
--(프로시저명 : USP_PRO_INFO, 월 형식은 YYYYMM이라 가정, 입고 및 
--출고는 OUT  매개변수로 처리
--1) 월에대한정보(1~12)
CREATE OR REPLACE PROCEDURE USP_PRO_INFO
( P_WOL IN VARCHAR2, P_PROD_ID IN VARCHAR2
, P_IN_AMT OUT NUMBER, P_OUT_AMT OUT NUMBER)
IS
BEGIN
    SELECT I.IN_AMT, J.OUT_AMT INTO P_IN_AMT, P_OUT_AMT
    FROM
    (
        SELECT LEVEL WOL FROM   DUAL
        CONNECT BY  LEVEL + 1 <= 13
    ) H,
    (
        --2) 월별입고정보
        SELECT EXTRACT(MONTH FROM BP.BUY_DATE) WOL
             , SUM(BP.BUY_QTY) IN_AMT
        FROM   PROD P, BUYPROD BP
        WHERE  P.PROD_ID = BP.BUY_PROD
        AND    TO_CHAR(BP.BUY_DATE,'YYYYMM') = P_WOL
        AND    P.PROD_ID = P_PROD_ID
        GROUP BY EXTRACT(MONTH FROM BP.BUY_DATE)
    ) I,
    (
        --3) 월별출고정보
        SELECT TO_NUMBER(SUBSTR(C.CART_NO,5,2)) WOL
             , SUM(C.CART_QTY) OUT_AMT
        FROM   PROD P, CART C
        WHERE  P.PROD_ID = C.CART_PROD
        AND    C.CART_NO LIKE P_WOL || '%'
        AND    P.PROD_ID = P_PROD_ID
        GROUP BY TO_NUMBER(SUBSTR(C.CART_NO,5,2))
    ) J
    WHERE H.WOL = I.WOL(+)
    AND   H.WOL = J.WOL(+)
    AND   H.WOL = TO_NUMBER(SUBSTR(P_WOL,-2));
END;
/
VAR P_IN_AMT VARCHAR2
VAR P_OUT_AMT VARCHAR2
EXEC USP_PRO_INFO('202004', 'P101000001', :P_IN_AMT, :P_OUT_AMT)
PRINT P_IN_AMT
PRINT P_OUT_AMT;
/
SET SERVEROUTPUT ON;
--회원 아이디를 받으면 해달 이름을 리턴하는 함수 만들기
CREATE OR REPLACE FUNCTION FN_GETNAME(P_MEM_ID IN VARCHAR2)
       RETURN VARCHAR2
    IS
     V_NAME VARCHAR2(30);
BEGIN
    SELECT MEM_NAME INTO V_NAME
      FROM MEMBER
     WHERE MEM_ID = P_MEM_ID;
     
     RETURN V_NAME;
     
     --DBMS_OUTPUT.PUT_LINE('V_NAME : ' || V_NAME);
 END;
/   
SELECT FN_GETNAME('c001') FROM DUAL; 
/

------------------------------------------------------------------------
SELECT EXTRACT(YEAR FROM SYSDATE) FROM DUAL;
--년도 및 상품코드를 입력 받으면 해당년도의 평균 판매 횟수를 반환하는 함수
/
CREATE OR REPLACE FUNCTION FN_PRODAVGQTY
(P_YEAR IN NUMBER DEFAULT(EXTRACT(YEAR FROM SYSDATE)),
 P_PROD_ID IN VARCHAR2)
    RETURN NUMBER
 IS 
    V_QTY NUMBER;
 BEGIN
        SELECT NVL(ROUND(AVG(CART_QTY),2),0) INTO V_QTY
          FROM CART
         WHERE CART_PROD = P_PROD_ID
           AND CART_NO LIKE P_YEAR || '%';
           
           RETURN V_QTY;
END;
/
VAR QTY NUMBER
EXEC :QTY := FN_PRODAVGQTY(2020,'P101000001')
PRINT QTY;
/
SELECT PROD_ID, PROD_NAME, 
       FN_PRODAVGQTY(2020,PROD_ID) AVG_QTY_2020,
       FN_PRODAVGQTY(2021,PROD_ID) AVG_QTY_2021
FROM PROD;
/
-----------------------------------------------------------------------------------------------
--함수 문제
--다음과 같이 출력해보자
--상품코드, 상품명, 대분류코드, 대분류명
--단, 함수를 생성하여 대분류명을 처리해보자
--함수명은 FN_PRODNM
CREATE OR REPLACE FUNCTION FN_PRODNM(P_PROD_LGU IN VARCHAR2)
    RETURN VARCHAR2
IS
    V_NM VARCHAR2(100);
BEGIN
    SELECT LPROD_NM INTO V_NM
      FROM LPROD
     WHERE LPROD_GU = P_PROD_LGU;
    RETURN V_NM;
END;
/
SELECT PROD_ID, PROD_NAME, PROD_LGU,
       FN_PRODNM(PROD_LGU) NM
  FROM PROD;
  
